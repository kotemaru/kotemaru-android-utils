#*
定義済変数
${packageName}      : このクラスのパッケージ名
${className}        : このクラスのクラス名
${typeElement}      : アノテーションの定義された元クラスの TypeElement
${annotation}       : 元クラスに定義されたアノテーション(HandlerHelper)
${classDecl}        : ClassDeclインスタンス
*#
// This is generated code.
package ${packageName};

import org.kotemaru.android.delegatehandler.rt.Runner;
import org.kotemaru.android.delegatehandler.rt.ThreadManager;
import android.util.Log;

public class ${className}  $classDecl.implements
{
	private static final String TAG = "${className}";
	private static final String TRACE_TAG = "DH-Trace";
	private static final boolean IS_DEBUG = ${typeElement.simpleName}.IS_DEBUG;

	public ThreadLocal<Runner> mCurrentRunner = new ThreadLocal<Runner>();
	public final ${typeElement.simpleName} mOrigin;
	public final ThreadManager mThreadManager;

	public ${className}(${typeElement.simpleName} origin, ThreadManager threadManager) {
		this.mOrigin = origin;
		this.mThreadManager = threadManager;
	}

## 元クラスのメソッド一覧を取得
#foreach( $method in $classDecl.getMethods() )
	public ${method.elem.returnType} ${method.name}(${method.params}) {
		final Runner runner = new Runner(){
			@Override public void run() {
				mCurrentRunner.set(this);
				try {
					mOrigin.${method.name}(${method.arguments});
				} catch (Throwable t) {
#if( $method.retry > 0)
					if (this.doRetry()) {
						Log.e(TAG, "Retry : ${method.name} in handler:"+t);
						mThreadManager.post($method.threadName, this, this.getInterval());
					} else {
#if( ! $method.isErrorHandler() )
						onDelegateHandlerError(t, "${method.name}"  ${method.getArguments(true)});
#end
					}
#else
#if( ! $method.isErrorHandler() )
					onDelegateHandlerError(t, "${method.name}"  ${method.getArguments(true)});
#end
#end
				} finally {
					mCurrentRunner.set(null);
				}
			}
		};
		if (IS_DEBUG) {
			Log.v(TRACE_TAG, runner.toTraceString(mCurrentRunner.get(),$method.threadName,"${method.name}" ${method.getArguments(true)}));
		}
#if( $method.retry > 0)
		runner.setRetryInfo($method.retry, $method.interval, ${method.intervalRate}F);
#end
		mThreadManager.post($method.threadName, runner, ${method.delay});
	}
#end

#if( ! $classDecl.hasErrorHandler() )
	private void onDelegateHandlerError(Throwable t, String methodName, Object... arguments);
		Log.e(TAG, "${method.name} in handler",t);
		throw new DelegateHandlerError(t);
	}
#end
}
